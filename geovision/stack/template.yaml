AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  End-to-end Azrius GeoView stack:
   • S3 bucket → $(AZRIUS_APP_BUCKET)
   • SNS topic → $(AZRIUS_APP_SNS)
   • SQS queue → $(AZRIUS_APP_SQS)
   • Lambda function → $(AZRIUS_APP_LAMBDA)
   • Watch prefix → $(AZRIUS_APP_FOLDER) for ObjectCreated events

Parameters:
  AzriusAppBucket:
    Type: String
    Description: S3 bucket name
  AzriusAppFolder:
    Type: String
    Description: S3 prefix to watch (e.g. "geoview/")
  AzriusAppSns:
    Type: String
    Description: SNS topic name
  AzriusAppSqs:
    Type: String
    Description: SQS queue name
  AzriusAppLambda:
    Type: String
    Description: Lambda function name
  AzriusAppPython:
    Type: String
    Description: Lambda runtime (e.g. python3.12)

  BedrockModelArn:
    Type: String
    Description: ARN of the Bedrock model to invoke (e.g. "arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-text-express-v1")

  CodeS3Bucket:
    Type: String
    Description: "S3 bucket where the Lambda ZIP is uploaded"
  CodeS3Key:
    Type: String
    Description: "S3 key for the Lambda ZIP (e.g. geoview/handler.zip)"
  CodeS3Version:
    Type: String
    Description: S3 object version ID for handler.zip

  DeployTimestamp:
    Type: String
    Description: force a new deployment

Resources:
  ### 1) S3 Bucket ###
  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AzriusAppBucket
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref AzriusAppFolder
            Topic: !Ref AppSnsTopic

  ### 2) SNS Topic ###
  AppSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref AzriusAppSns

  AppSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AppSnsTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Publish
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sns:Publish
            Resource: !Ref AppSnsTopic

  ### 3) SQS Queue + Policy ###
  AppQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref AzriusAppSqs

  AppQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AppQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: sqs:SendMessage
            Resource: !GetAtt AppQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref AppSnsTopic

  ### 4) SNS → SQS Subscription ###
  SNSToSQSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AppSnsTopic
      Protocol: sqs
      Endpoint: !GetAtt AppQueue.Arn

  ### 5) IAM Role for Lambda ###
  AppLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AzriusAppLambda}-exec-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AppSnsTopic

              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${AzriusAppBucket}

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${AzriusAppBucket}/${AzriusAppFolder}/*

              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: arn:aws:bedrock:us-east-1::foundation-model/*

  ### 6) Lambda Function (from S3) ###
  AppLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref AzriusAppLambda
      Runtime: !Ref AzriusAppPython
      Handler: handler.lambda_handler
      Role: !GetAtt AppLambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key:    !Ref CodeS3Key

      Environment:
        Variables:
          DEPLOY_TIMESTAMP: !Ref DeployTimestamp

  ### 7) SNS → Lambda Subscription ###
  SNSToLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AppSnsTopic
      Protocol: lambda
      Endpoint: !GetAtt AppLambdaFunction.Arn

  ### 8) Permission for SNS to invoke Lambda ###
  LambdaPermissionForSNS:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AppLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AppSnsTopic

Outputs:
  BucketName:
    Description: The S3 bucket created
    Value: !Ref AzriusAppBucket

  SnsTopicArn:
    Description: ARN of the SNS topic
    Value: !Ref AppSnsTopic

  SqsQueueUrl:
    Description: URL of the SQS queue
    Value: !Ref AppQueue

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt AppLambdaFunction.Arn

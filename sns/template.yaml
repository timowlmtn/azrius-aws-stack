AWSTemplateFormatVersion: '2010-09-09'
# We still need the SAM transform so we can use AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
Description: >
  Publish an SNS message whenever any new image file is uploaded under azri.us-data/geovision/.

Parameters:
  # We assume you’ll pass in the same S3 bucket where the ZIP will be uploaded
  CodeS3Bucket:
    Type: String
    Description: "The S3 bucket where the Lambda ZIP is uploaded"
  CodeS3Key:
    Type: String
    Description: "The S3 key (object name) for the Lambda ZIP"

Resources:

  # 1) SNS Topic to publish image-upload notifications
  ImageUploadTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: GeovisionImageUploadTopic

  # 2) The Lambda function that checks the file extension and publishes to SNS
  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri:
        Bucket: !Ref CodeS3Bucket
        Key:    !Ref CodeS3Key
      Environment:
        Variables:
          TOPIC_ARN: !Ref ImageUploadTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref ImageUploadTopic
      # NOTE: No “Events:” section here, since we’ll wire up EventBridge separately.

  # 3) EventBridge rule that catches ANY “PutObject” on bucket azri.us-data
  #    where the object key starts with “geovision/”.  S3 now puts object-created
  #    notifications onto EventBridge automatically.
  S3ObjectCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger whenever a new object lands under azri.us-data/geovision/"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - azri.us-data
          object:
            key:
              - prefix: "geovision/"
          # We only care about new objects (PutObject).  You could also match
          # eventName: ["CompleteMultipartUpload"] if you expect very large files.
          eventName:
            - PutObject
      Targets:
        - Arn: !GetAtt ImageUploadFunction.Arn
          Id: InvokeImageUploadLambda

  # 4) Grant EventBridge permission to invoke our Lambda
  AllowEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ImageUploadFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3ObjectCreatedRule.Arn

Outputs:
  TopicArn:
    Description: "ARN of the SNS topic for new‐image uploads"
    Value: !Ref ImageUploadTopic
  LambdaArn:
    Description: "ARN of the ImageUploadFunction"
    Value: !GetAtt ImageUploadFunction.Arn
  EventRuleArn:
    Description: "ARN of the EventBridge rule that catches new S3 objects"
    Value: !GetAtt S3ObjectCreatedRule.Arn
